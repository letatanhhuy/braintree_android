apply plugin: 'com.android.library'

def DEVELOPMENT_URL = System.properties['DEVELOPMENT_URL'] ?: '"http://10.0.2.2:3000/"';

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        consumerProguardFiles 'proguard.pro'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jvmArgs '-noverify'
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        androidTest {
            java.srcDir sharedTestDir
        }
        test {
            java.srcDir sharedTestDir
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.1'
    
    implementation "com.paypal.lighthouse:lighthouse-fpti:1.2.1@aar"
    implementation "com.paypal.lighthouse:lighthouse-core:1.2.1@aar"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.work:work-runtime-ktx:2.3.4"
    implementation "com.google.code.gson:gson:2.8.6"
    implementation "com.squareup.okhttp3:okhttp:4.7.1"
    
    compileOnly(braintreeDependency.playServicesWallet) {
        exclude module: 'support-v4'
    }
    compileOnly project(':BraintreeDataCollector')
    compileOnly project(':ThreeDSecure')

    api braintreeDependency.googlePayment
    api project(':Core')
    api project(':PayPalOneTouch')

    androidTestImplementation braintreeDependency.playServicesWallet
    androidTestImplementation project(':BraintreeDataCollector')
    androidTestImplementation project(':ThreeDSecure')
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation project(':TestUtils')

    testImplementation braintreeDependency.playServicesWallet
    testImplementation project(':BraintreeDataCollector')
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.6'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.6'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.6'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.6'
    testImplementation 'org.skyscreamer:jsonassert:1.4.0'
    testImplementation project(':TestUtils')
    testImplementation project(':ThreeDSecure')
}

android.buildTypes.each { type ->
    type.buildConfigField 'String', 'DEVELOPMENT_URL', DEVELOPMENT_URL
}

task runAllTests {
    /*
     * Empty task to run via command line Rakefile or ci.sh to indicate that tests that depend on
     * setting up external services (like the test invalid https server) are set up correctly.
     * Otherwise, these tests will be skipped
     */
}

gradle.taskGraph.whenReady { taskGraph ->
    def RUN_ALL_TESTS = taskGraph.hasTask(':Braintree:runAllTests')
    android.buildTypes.debug.buildConfigField('boolean', 'RUN_ALL_TESTS', '' + RUN_ALL_TESTS)
}

/* maven deploy + signing */
task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
    // TODO remove these exclusions when this is ready for GA
    exclude "com/braintreepayments/api/PreferredPaymentMethods.java"
    exclude "com/braintreepayments/api/models/PreferredPaymentMethodsResult.java"
    exclude "com/braintreepayments/api/interfaces/PreferredPaymentMethodsListener.java"
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = 'javadoc'
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocsJar
    archives sourcesJar
}

apply plugin: 'io.codearte.nexus-staging'
nexusStaging {
    packageGroup = "com.braintreepayments"
}

group = 'com.braintreepayments.api'
uploadArchives {
    repositories {
        mavenDeployer {
            pom.setArtifactId 'braintree'

            pom.project {
                name 'braintree'
                groupId = 'com.braintreepayments.api'
                version = "${android.defaultConfig.versionName}"
                description 'This is Braintree\'s Android SDK. Integrate this library to accept payments in your Android app.'
            }
        }
    }
}
